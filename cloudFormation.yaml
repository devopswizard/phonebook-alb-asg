AWSTemplateFormatVersion: 2010-09-09

Description: |
  CloudFormation Template for Phonebook Application. This template creates Application Load Balancer with Auto Scaling Group of Amazon Linux 2 (ami-04ad2567c9e3d7893) EC2 Instances which host Python Flask Web Application. EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup, and allows tcp(3306) connections only within itself. RDS DB instance is placed within WebServerSecurityGroup so that Database Server can communicate with Web Servers. Application Load Balancer is placed within ALBSecurityGroup which allows http (80) connections from anywhere. WebServerASG Auto Scaling Group is using the WebServerLT Launch Template in order to spin up instances needed. WebServerLT Launch Template is configured to prepare Python Flask environment on EC2, and to deploy Phonebook Application on Flask Server after downloading the app code from Github repository.
Parameters:
  SelectVPC:
    Description: Please select your VPC.
    Type: AWS::EC2::VPC::Id

  SelectKeyPair:
    Description: Please select your Key Pair.
    Type: AWS::EC2::KeyPair::KeyName

  SelectSubnets:
    Description: Please select your Subnets.
    Type: AWS::EC2::Subnet::Id

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref SelectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http connections.
      VpcId: !Ref SelectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      EC2VpcId:
        Ref: "SelectVPC"
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0
          EC2SecurityGroupName:
            Ref: "InstanceSecurityGroup"
      GroupDescription: "Frontend Access"

    myLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
        LaunchTemplateData:
          ImageId: ami-04ad2567c9e3d7893
          InstanceType: t2.micro
          KeyName: !Ref SelectKeyPair
          SecurityGroupIds:
            - !GetAtt InstanceSecurityGroup.GroupId
          TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: Name
                  Value: !Sub Web Server of ${AWS::StackName}
          UserData:
            Fn::Base64: !Sub
              - DBURI: !GetAtt MyDB.Endpoint.Address
              - |
                #!/bin/bash
                yum update -y
                yum install git -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                mkdir /app 
                cd /app
                git clone https://github.com/joshuatallman/phonebook-alb-asg.git
                mv phonebook-alb-asg/* .
                echo ${DBURI} > /app/dbserver.endpoint
                python3 /app/phonebook-app.py

  MyDB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: phone-book-app
      BackupRetentionPeriod: 0
      DBName: clarusway_phonebook
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 20
      MaxAllocatedStorage: 40
      Engine: MySQL
      EngineVersion: "8.0.19"
      MasterUsername: admin
      MasterUserPassword: Pl123456pl
      DBSecurityGroups:
        - !Ref DBSecurityGroup

  myALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - !Ref SelectSubnets

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref SelectVPC

  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref myALB
      Port: 80
      Protocol: "HTTP"

  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      DesiredCapacity: 2
      AvailabilityZones: !GetAZs ""
      TargetGroupARNs: !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300

Outputs:
  WebsiteURL:
  Value: !Sub
    - http://${ALBAddress}
    - ALBAddress: !GetAtt myALB.DNSName
  Description: Phonebook Application Load Balancer URL
